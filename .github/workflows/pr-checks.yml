name: PR Checks (Conftest + Preview)

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize, edited, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: pr-check-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------
  # 1) SETUP - Install tools once
  # ----------------------------
  setup:
    name: Install Tools
    runs-on: ubuntu-latest
    steps:
      - name: Install Conftest
        shell: bash
        run: |
          set -Eeuo pipefail
          VER="v0.62.0"
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64|amd64) ASSET="conftest_${VER#v}_Linux_x86_64.tar.gz" ;;
            aarch64|arm64) ASSET="conftest_${VER#v}_Linux_arm64.tar.gz" ;;
            *) echo "Unsupported arch: $ARCH" >&2; exit 1 ;;
          esac
          URL="https://github.com/open-policy-agent/conftest/releases/download/${VER}/${ASSET}"
          echo "Downloading $URL"
          curl -sSfL "$URL" | tar xz
          chmod +x conftest
          
      - name: Install yq
        shell: bash
        run: |
          VER="v4.44.3"
          curl -sSfL -o yq \
            "https://github.com/mikefarah/yq/releases/download/${VER}/yq_linux_amd64"
          chmod +x yq
          
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: |
            conftest
            yq
          retention-days: 1

  # ----------------------------
  # 2) PATH GUARD (using cached conftest)
  # ----------------------------
  path-guard:
    name: Path Guard (Conftest)
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      ORG_TOKEN: ${{ secrets.ORG_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: .
          
      - name: Setup tools
        run: |
          chmod +x conftest yq
          sudo mv conftest /usr/local/bin/
          sudo mv yq /usr/local/bin/
          conftest --version

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "BASE=$BASE"
          echo "HEAD=$HEAD"

      - name: Get changed files → files.json
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          git diff --name-only "${{ steps.revs.outputs.base }}..${{ steps.revs.outputs.head }}" > /tmp/changed.txt || true
          echo "Changed files:"; cat /tmp/changed.txt || true
          jq -Rsn '[inputs | split("\n")[] | select(length>0)]' < /tmp/changed.txt > /tmp/files.json
          echo "files.json:"; cat /tmp/files.json

      - name: Resolve actor teams (optional)
        id: teams
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -n "${ORG_TOKEN:-}" ]; then
            API="https://api.github.com"
            ORG="${{ github.repository_owner }}"
            HDR="Authorization: Bearer $ORG_TOKEN"
            ACC="Accept: application/vnd.github+json"
            curl -sSfL -H "$HDR" -H "$ACC" "$API/user/teams?per_page=100" \
              | jq --arg ORG "$ORG" '[.[] | select(.organization.login==$ORG) | .slug | ascii_downcase]' \
              > /tmp/actor_teams.json || echo "[]">/tmp/actor_teams.json
          else
            echo "[]">/tmp/actor_teams.json
            echo "No ORG_TOKEN; proceeding with empty team set."
          fi
          echo "actor_teams:"; cat /tmp/actor_teams.json

      - name: Build input.json for Path Guard
        id: input
        shell: bash
        run: |
          set -Eeuo pipefail
          jq -n \
            --slurpfile files /tmp/files.json \
            --slurpfile teams /tmp/actor_teams.json \
            --argjson debug false \
            '{debug:$debug, files:$files[0], actor_teams:$teams[0]}' > input.json
          echo "input.json:"; cat input.json

      - name: Run Path Guard policy
        shell: bash
        run: |
          set -Eeuo pipefail
          conftest test \
            --namespace pr.pathguard \
            --policy "${{ github.workspace }}/conftest-policy" \
            "${{ github.workspace }}/input.json"

      - name: Upload input.json (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conftest-input
          path: input.json
          retention-days: 7

  # ------------------------------------
  # 3) TENANT-LEVEL CONFIGURATION VALIDATION
  # ------------------------------------
  tenant-config-validation:
    name: Tenant Config Validation
    runs-on: ubuntu-latest
    needs: [setup, path-guard]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: .
          
      - name: Setup tools
        run: |
          chmod +x conftest yq
          sudo mv conftest /usr/local/bin/
          sudo mv yq /usr/local/bin/
          conftest --version
          yq --version

      - name: Check for tenant config changes
        id: check-changes
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi

          if git diff --name-only "$BASE..$HEAD" | grep -E '^tenants/(dev|qa|prod)/tenant.*\.yml$' > /dev/null; then
            echo "tenant-changes=true" >> "$GITHUB_OUTPUT"
            echo "Tenant configuration changes detected"
          else
            echo "tenant-changes=false" >> "$GITHUB_OUTPUT"
            echo "No tenant configuration changes detected"
          fi

      - name: Validate tenant configurations
        if: steps.check-changes.outputs.tenant-changes == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          cd tenants
          
          ENVIRONMENTS=("dev" "qa" "prod")
          VALIDATION_FAILED=false
          
          for ENV in "${ENVIRONMENTS[@]}"; do
            echo "Merging configs for environment: $ENV"
            
            # Clean up any existing merged files
            rm -f ${ENV}-tenant*-combined.yml
            
            if [ ! -d "$ENV" ]; then
              echo "Warning: Environment directory '$ENV' not found, skipping..."
              continue
            fi
            
            # Loop through all tenant directories
            for tenant_dir in ${ENV}/tenant*/; do
              if [ -d "$tenant_dir" ]; then
                tenant_name=$(basename "$tenant_dir")
                echo "Processing $tenant_name..."
                
                # Check if YAML files exist
                if ls ${tenant_dir}/*.yml 1> /dev/null 2>&1; then
                  # Merge all YAML files for this tenant
                  yq eval-all '. as $item ireduce ({}; . * $item)' \
                    ${tenant_dir}/*.yml \
                    > ${ENV}-${tenant_name}-combined.yml
                  
                  echo "✓ Created ${ENV}-${tenant_name}-combined.yml"
                else
                  echo "⚠ No YAML files found in $tenant_dir"
                fi
              fi
            done
            
            # Check if we have any merged files to validate
            if ls ${ENV}-tenant*-combined.yml 1> /dev/null 2>&1; then
              echo ""
              echo "Running conftest validation for $ENV..."
              
              if conftest test --policy overlays/policies/ --data overlays/validators/ ${ENV}-tenant*-combined.yml; then
                echo "✅ $ENV environment validation PASSED"
              else
                echo "❌ $ENV environment validation FAILED"
                VALIDATION_FAILED=true
              fi
            else
              echo "No merged files found for $ENV environment"
            fi
            
            # Clean up
            rm -f ${ENV}-tenant*-combined.yml
          done
          
          if [ "$VALIDATION_FAILED" = true ]; then
            echo "One or more environment validations failed"
            exit 1
          else
            echo "All tenant configurations comply with enterprise security standards"
          fi

      - name: Skip validation message
        if: steps.check-changes.outputs.tenant-changes == 'false'
        shell: bash
        run: |
          echo "No tenant configuration changes detected in this PR."
          echo "Skipping tenant configuration validation."

  # ------------------------------------
  # 4) APP-LEVEL CONFIGURATION VALIDATION
  # ------------------------------------
  app-level-validation:
    name: App-Level Config Validation
    runs-on: ubuntu-latest
    needs: [setup, path-guard]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: .
          
      - name: Setup tools
        run: |
          chmod +x conftest yq
          sudo mv conftest /usr/local/bin/
          sudo mv yq /usr/local/bin/
          conftest --version
          yq --version

      - name: Check for app config changes
        id: check-changes
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi

          if git diff --name-only "$BASE..$HEAD" | grep -E '^apps/[^/]+/(tokens|security|orgs)\.yml$' > /dev/null; then
            echo "app-changes=true" >> "$GITHUB_OUTPUT"
            echo "App configuration changes detected"
          else
            echo "app-changes=false" >> "$GITHUB_OUTPUT"
            echo "No app configuration changes detected"
          fi

      - name: Validate app configurations
        if: steps.check-changes.outputs.app-changes == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          
          VALIDATION_FAILED=false
          TOTAL_APPS=0
          PASSED_APPS=0
          FAILED_APPS=0
          
          echo "=========================================="
          echo "App Configuration Validation"
          echo "=========================================="
          echo ""
          
          # Loop through all app directories
          for app_dir in apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              TOTAL_APPS=$((TOTAL_APPS + 1))
              
              echo "Processing: $app_name"
              echo "----------------------------------------"
              
              # Determine app type
              APP_TYPE="spa"
              if [[ "$app_name" == *"app2"* ]] || [[ "$app_name" == *"web"* ]]; then
                APP_TYPE="regular_web"
              elif [[ "$app_name" == *"mobile"* ]] || [[ "$app_name" == *"native"* ]]; then
                APP_TYPE="native"
              fi
              
              echo "App type: $APP_TYPE"
              
              # Check if required files exist
              if [ ! -f "${app_dir}/tokens.yml" ] || [ ! -f "${app_dir}/security.yml" ] || [ ! -f "${app_dir}/orgs.yml" ]; then
                echo "⚠️  Missing required YAML files in ${app_dir}"
                echo "Required files: tokens.yml, security.yml, orgs.yml"
                FAILED_APPS=$((FAILED_APPS + 1))
                VALIDATION_FAILED=true
                continue
              fi
              
              # Create combined config
              OUTPUT_FILE="${app_dir}/${app_name}-combined.yml"
              
              cat > ${OUTPUT_FILE} <<EOF
          app_type: "${APP_TYPE}"
          tokens:
          $(yq eval '.' ${app_dir}/tokens.yml | sed 's/^/  /')
          security:
          $(yq eval '.' ${app_dir}/security.yml | sed 's/^/  /')
          orgs:
          $(yq eval '.' ${app_dir}/orgs.yml | sed 's/^/  /')
          EOF
              
              echo "✓ Created ${OUTPUT_FILE}"
              
              # Run validation
              echo "Validating ${app_name}..."
              if conftest test \
                  --policy base/policies/ \
                  --data base/tenants-common \
                  ${OUTPUT_FILE}; then
                PASSED_APPS=$((PASSED_APPS + 1))
                echo "✅ PASS: $app_name"
              else
                FAILED_APPS=$((FAILED_APPS + 1))
                echo "❌ FAIL: $app_name"
                VALIDATION_FAILED=true
              fi
              
              echo ""
            fi
          done
          
          echo "=========================================="
          echo "Validation Summary"
          echo "=========================================="
          echo "Total Apps:   $TOTAL_APPS"
          echo "Passed:       $PASSED_APPS"
          echo "Failed:       $FAILED_APPS"
          echo "=========================================="
          
          if [ "$VALIDATION_FAILED" = true ]; then
            echo "One or more app validations failed"
            exit 1
          else
            echo "All app configurations comply with standards"
          fi

      - name: Skip validation message
        if: steps.check-changes.outputs.app-changes == 'false'
        shell: bash
        run: |
          echo "No app configuration changes detected in this PR."
          echo "Skipping app configuration validation."

  # ------------------------------------
  # 5) SHARED-SEC POLICIES (Conftest validation)
  # ------------------------------------
  shared-sec-policies:
    name: Shared-Sec Policies (Conftest)
    runs-on: ubuntu-latest
    needs: [setup, path-guard]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: .
          
      - name: Setup tools
        run: |
          chmod +x conftest yq
          sudo mv conftest /usr/local/bin/
          sudo mv yq /usr/local/bin/
          conftest --version

      - name: Get changed app config files
        id: changed-configs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi

          mapfile -t FILES < <(git diff --name-only "$BASE..$HEAD" \
            | grep -E '^apps/[^/]+/[^/]+\.(ya?ml)$' || true)

          if [ "${#FILES[@]}" -eq 0 ]; then
            echo "No app config changes detected; skipping security policy validation."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "App config files changed:"
          printf ' - %s\n' "${FILES[@]}"
          
          printf '%s\n' "${FILES[@]}" > /tmp/changed_configs.txt

      - name: Validate Security Policies
        if: steps.changed-configs.outputs.changed == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          
          echo "Running security policy validation..."
          echo "Policy file: overlays/policies/shared_sec.rego"
          echo "Data file: overlays/shared-sec/identity_access.yml"
          
          mapfile -t FILES < /tmp/changed_configs.txt
          
          FAILED=0
          
          for config in "${FILES[@]}"; do
            if [ -f "$config" ]; then
              echo "Testing $config..."
              if conftest test \
                --policy overlays/policies/shared_sec.rego \
                --data overlays/shared-sec/identity_access.yml \
                "$config"; then
                echo "PASSED: $config"
              else
                echo "FAILED: $config violates security policy"
                FAILED=1
              fi
            else
              echo "SKIPPED: $config (file not found)"
            fi
          done
          
          if [ $FAILED -eq 1 ]; then
            echo ""
            echo "Security Policy Validation FAILED"
            echo "One or more app configurations violate enterprise security policies."
            echo "Please review the violations above and update your configurations."
            exit 1
          else
            echo ""
            echo "Security Policy Validation PASSED"
            echo "All app configurations comply with enterprise security policies."
          fi

  # -------------------------------------------------------
  # 6) CONFIG PREVIEW (No enforcement, just rendering)
  # -------------------------------------------------------
  config-preview:
    name: Config Preview
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      contents: read
      pull-requests: write
      checks: write
    strategy:
      fail-fast: false
      matrix:
        tenant: [tenantA]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: conftest-and-yq-binaries
          path: .
          
      - name: Setup tools
        run: |
          chmod +x conftest yq
          sudo mv conftest /usr/local/bin/
          sudo mv yq /usr/local/bin/
          yq --version

      - name: Run configuration preview
        id: preview
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./scripts/preview.sh
          
          mkdir -p pr-check-output
          export CI_MODE=true
          
          if ./scripts/preview.sh "${{ matrix.tenant }}" 2>&1 | tee pr-check-output/preview-output-${{ matrix.tenant }}.log; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Configuration preview for ${{ matrix.tenant }}: Generated successfully" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "## Generated Files:" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Effective configs: \`out/{env}/${{ matrix.tenant }}.effective.yml\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Change diffs: \`out/{env}/${{ matrix.tenant }}.diff.txt\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Cross-env diffs: \`out/{env1}_vs_{env2}.${{ matrix.tenant }}.diff.txt\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
          else
            echo "status=error" >> $GITHUB_OUTPUT
            echo "Configuration preview for ${{ matrix.tenant }}: Failed" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "## Error Output:" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "\`\`\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            tail -50 pr-check-output/preview-output-${{ matrix.tenant }}.log >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "\`\`\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
          fi

      - name: Upload preview artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: config-preview-${{ matrix.tenant }}
          path: |
            out/**/${{ matrix.tenant }}.effective.yml
            out/**/${{ matrix.tenant }}.diff.txt
            out/*_vs_*.${{ matrix.tenant }}.diff.txt
            pr-check-output/
          retention-days: 7

      - name: Comment on PR with preview results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const status = '${{ steps.preview.outputs.status }}';
            const tenant = '${{ matrix.tenant }}';
            
            let summary;
            try {
              summary = fs.readFileSync(`pr-check-output/summary-${tenant}.md`, 'utf8');
            } catch (error) {
              summary = `Could not read configuration preview summary for tenant ${tenant}.`;
            }
            
            const header = `## Configuration Preview - ${tenant}
            
            **Status**: ${status === 'success' ? 'SUCCESS' : 'ERROR'}
            **Tenant**: ${tenant}
            **Environments**: dev, qa, prod

            ${summary}

            ---
            <details>
            <summary>View Generated Configuration Files</summary>

            Check the uploaded artifacts (\`config-preview-${tenant}\`) for:
            - **Effective configurations** per environment showing final merged configs
            - **Configuration diffs** showing changes from baseline
            - **Cross-environment diffs** showing drift between dev/qa/prod

            </details>
            
            > Security Note: Security policy validation is handled separately by the Shared-Sec Policies job above.`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes(`Configuration Preview - ${tenant}`)
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: header
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: header
              });
            }

      - name: Success summary
        if: steps.preview.outputs.status == 'success'
        shell: bash
        run: |
          echo "Configuration preview completed successfully for tenant ${{ matrix.tenant }}!"
          echo "All configuration files have been generated and are ready for review."