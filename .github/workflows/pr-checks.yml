name: PR Checks (Conftest + Preview Enforce)

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize, edited, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write  # Added for commenting
  checks: write        # Added for status checks

concurrency:
  group: pr-check-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------
  # 1) PATH GUARD (your existing)
  # ----------------------------
  path-guard:
    name: Path Guard (Conftest)
    runs-on: ubuntu-latest
    env:
      ORG_TOKEN: ${{ secrets.ORG_TOKEN }} # optional: org PAT with read:org
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "BASE=$BASE"
          echo "HEAD=$HEAD"

      - name: Get changed files → files.json
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          git diff --name-only "${{ steps.revs.outputs.base }}..${{ steps.revs.outputs.head }}" > /tmp/changed.txt || true
          echo "Changed files:"; cat /tmp/changed.txt || true
          jq -Rsn '[inputs | split("\n")[] | select(length>0)]' < /tmp/changed.txt > /tmp/files.json
          echo "files.json:"; cat /tmp/files.json

      - name: Resolve actor teams (optional)
        id: teams
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -n "${ORG_TOKEN:-}" ]; then
            API="https://api.github.com"
            ORG="${{ github.repository_owner }}"
            HDR="Authorization: Bearer $ORG_TOKEN"
            ACC="Accept: application/vnd.github+json"
            curl -sSfL -H "$HDR" -H "$ACC" "$API/user/teams?per_page=100" \
              | jq --arg ORG "$ORG" '[.[] | select(.organization.login==$ORG) | .slug | ascii_downcase]' \
              > /tmp/actor_teams.json || echo "[]">/tmp/actor_teams.json
          else
            echo "[]">/tmp/actor_teams.json
            echo "No ORG_TOKEN; proceeding with empty team set."
          fi
          echo "actor_teams:"; cat /tmp/actor_teams.json

      - name: Build input.json for Path Guard
        id: input
        shell: bash
        run: |
          set -Eeuo pipefail
          jq -n \
            --slurpfile files /tmp/files.json \
            --slurpfile teams /tmp/actor_teams.json \
            --argjson debug false \
            '{debug:$debug, files:$files[0], actor_teams:$teams[0]}' > input.json
          echo "input.json:"; cat input.json

      - name: Print policy hash (debug)
        shell: bash
        run: |
          set -e
          sha256sum "${{ github.workspace }}/conftest-policy/path_guard.rego" || true
          nl -ba "${{ github.workspace }}/conftest-policy/path_guard.rego" | sed -n '1,80p' || true

      - name: Install Conftest (pinned, curl | tar)
        shell: bash
        run: |
          set -Eeuo pipefail
          VER="v0.62.0"
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64|amd64) ASSET="conftest_${VER#v}_Linux_x86_64.tar.gz" ;;
            aarch64|arm64) ASSET="conftest_${VER#v}_Linux_arm64.tar.gz" ;;
            *) echo "Unsupported arch: $ARCH" >&2; exit 1 ;;
          esac
          URL="https://github.com/open-policy-agent/conftest/releases/download/${VER}/${ASSET}"
          echo "Downloading $URL"
          curl -sSfL "$URL" | tar xz
          sudo mv conftest /usr/local/bin/
          conftest --version

      - name: Conftest verify (unit tests in conftest-policy/ if any)
        shell: bash
        run: |
          set -Eeuo pipefail
          if compgen -G "conftest-policy/*_test.rego" > /dev/null; then
            conftest verify --policy "${{ github.workspace }}/conftest-policy"
          else
            echo "No *_test.rego in conftest-policy; skipping verify."
          fi

      - name: Run Path Guard policy
        shell: bash
        run: |
          set -Eeuo pipefail
          conftest test \
            --namespace pr.pathguard \
            --policy "${{ github.workspace }}/conftest-policy" \
            "${{ github.workspace }}/input.json"

      - name: Upload input.json (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conftest-input
          path: input.json
          retention-days: 7

  # ------------------------------------
  # 2) AUTH0 POLICIES (your existing)
  # ------------------------------------
  auth0-policies:
    name: Auth0 Policies (Conftest)
    runs-on: ubuntu-latest
    needs: [path-guard]  # run after path-guard
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install Conftest (same method)
        shell: bash
        run: |
          set -Eeuo pipefail
          VER="v0.62.0"
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64|amd64) ASSET="conftest_${VER#v}_Linux_x86_64.tar.gz" ;;
            aarch64|arm64) ASSET="conftest_${VER#v}_Linux_arm64.tar.gz" ;;
            *) echo "Unsupported arch: $ARCH" >&2; exit 1 ;;
          esac
          URL="https://github.com/open-policy-agent/conftest/releases/download/${VER}/${ASSET}"
          echo "Downloading $URL"
          curl -sSfL "$URL" | tar xz
          sudo mv conftest /usr/local/bin/
          conftest --version

      - name: Conftest verify (Auth0 policy unit tests if present)
        shell: bash
        run: |
          set -Eeuo pipefail
          DIR="base/policies/auth0-policy"
          if [ -d "$DIR" ] && compgen -G "${DIR}/*_test.rego" > /dev/null; then
            conftest verify "$DIR"
          else
            echo "No *_test.rego in $DIR; skipping verify."
          fi

      - name: Conftest test on changed Auth0 YAMLs (uses --namespace auth0.policy)
        shell: bash
        run: |
          set -Eeuo pipefail

          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi

          mapfile -t FILES < <(git diff --name-only "$BASE..$HEAD" \
            | grep -E '^apps/[^/]+/(auth0/)?[^/]+\.(ya?ml)$' || true)

          if [ "${#FILES[@]}" -eq 0 ]; then
            echo "No Auth0 YAML changes; skipping conftest test."
            exit 0
          fi

          echo "Testing files:"
          printf ' - %s\n' "${FILES[@]}"

          conftest test \
            --namespace auth0.policy \
            --policy base/policies/auth0-policy \
            "${FILES[@]}"

  # -------------------------------------------------------
  # 3) PREVIEW + ENFORCE SHARED-SEC (reject PR on violation)
  # -------------------------------------------------------
  preview-and-enforce:
    name: Preview + Enforce Shared-Sec
    runs-on: ubuntu-latest
    needs: [path-guard]          # wait for path-guard
    permissions:
      contents: read
      pull-requests: write
      checks: write
    strategy:
      fail-fast: false
      matrix:
        tenant: [tenantA]  # <-- update this list to your tenants
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq (v4)
        shell: bash
        run: |
          set -Eeuo pipefail
          VER="v4.44.3"
          curl -sSfL -o /usr/local/bin/yq \
            "https://github.com/mikefarah/yq/releases/download/${VER}/yq_linux_amd64"
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Run preview + enforcement
        id: security_check
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./scripts/preview.sh
          
          # Create output directory for PR feedback
          mkdir -p pr-check-output
          
          # Set CI mode for enhanced output
          export CI_MODE=true
          
          # Run preview script and capture both stdout and stderr
          if ./scripts/preview.sh "${{ matrix.tenant }}" 2>&1 | tee pr-check-output/full-output-${{ matrix.tenant }}.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "Security compliance check for ${{ matrix.tenant }}: PASSED ✅" >> pr-check-output/summary-${{ matrix.tenant }}.md
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Security compliance check for ${{ matrix.tenant }}: FAILED ❌" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "## Security Violations Found:" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "\`\`\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            # Better violation capture - look for multiple patterns
            grep -E "(❌|dev:|qa:|prod:).*(missing|weaker|violation|enabled.*disabled|disabled.*enabled)" pr-check-output/full-output-${{ matrix.tenant }}.log | sed 's/^/  /' >> pr-check-output/summary-${{ matrix.tenant }}.md || \
            grep -E "Enforcement failed:" pr-check-output/full-output-${{ matrix.tenant }}.log | sed 's/^/  /' >> pr-check-output/summary-${{ matrix.tenant }}.md || \
            echo "  Check the full log in artifacts for detailed violation information" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "\`\`\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "### Required Actions:" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Fix all security violations listed above" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Ensure configurations meet enterprise security baseline requirements" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Re-run tests locally with \`./scripts/preview.sh ${{ matrix.tenant }}\`" >> pr-check-output/summary-${{ matrix.tenant }}.md
            echo "- Check uploaded artifacts for complete violation details" >> pr-check-output/summary-${{ matrix.tenant }}.md
          fi

      - name: Upload preview artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-${{ matrix.tenant }}
          path: |
            out/**/${{ matrix.tenant }}.effective.yml
            out/**/${{ matrix.tenant }}.diff.txt
            out/*_${{ '*' }}_${{ '*' }}.${{ matrix.tenant }}.diff.txt
            pr-check-output/
          retention-days: 7

      - name: Comment on PR with security results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const status = '${{ steps.security_check.outputs.status }}';
            const tenant = '${{ matrix.tenant }}';
            
            // Read the summary
            let summary;
            try {
              summary = fs.readFileSync(`pr-check-output/summary-${tenant}.md`, 'utf8');
            } catch (error) {
              summary = `Could not read security check summary for tenant ${tenant}.`;
            }
            
            // Create PR comment content
            const header = `## 🔒 Auth0 Security Baseline Check - ${tenant}
            
            **Status**: ${status === 'passed' ? '✅ PASSED' : '❌ FAILED'}
            **Tenant**: ${tenant}
            **Environments**: dev, qa, prod

            ${summary}

            ---
            <details>
            <summary>📊 View Configuration Changes</summary>

            Check the uploaded artifacts (\`preview-${tenant}\`) for:
            - Effective configurations per environment
            - Configuration diffs showing changes
            - Cross-environment drift analysis

            </details>`;

            // Find existing comment for this tenant
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes(`🔒 Auth0 Security Baseline Check - ${tenant}`)
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: header
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: header
              });
            }



      - name: Fail job if security check failed
        if: steps.security_check.outputs.status == 'failed'
        shell: bash
        run: |
          echo "❌ Security compliance check failed for tenant ${{ matrix.tenant }}!"
          echo "This PR cannot be merged until all security violations are resolved."
          exit 1

      - name: Success summary
        if: steps.security_check.outputs.status == 'passed'
        shell: bash
        run: |
          echo "✅ Security compliance check passed for tenant ${{ matrix.tenant }}!"
          echo "All Auth0 configurations meet enterprise security baseline requirements."