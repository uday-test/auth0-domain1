name: Path Guard (Conftest)

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize, edited, labeled, unlabeled]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: pr-guard-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  path-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "Base: $BASE"
          echo "Head: $HEAD"

      - name: Compute changed files
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          CHANGED="$(git diff --name-only ${{ steps.revs.outputs.base }}...${{ steps.revs.outputs.head }} || true)"
          echo "changed<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "Changed files:"
          echo "$CHANGED"

      - name: Collect PR labels (optional)
        id: labels
        shell: bash
        run: |
          jq -r '.pull_request.labels[].name' < "$GITHUB_EVENT_PATH" | tr -d '\r' > /tmp/labels.txt || true
          echo "labels<<EOF" >> "$GITHUB_OUTPUT"
          cat /tmp/labels.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "PR labels:"; cat /tmp/labels.txt || true

      - name: Create Conftest input
        shell: bash
        run: |
          python - << 'PY'
          import json, os
          files  = [f for f in os.environ.get("FILES","").splitlines()  if f.strip()]
          labels = [l for l in os.environ.get("LABELS","").splitlines() if l.strip()]
          data = {
            "files":  files,
            "labels": labels,
            "debug":  false   # set true to force [debug] WARNs
          }
          with open("input.json","w", encoding="utf-8") as fh:
              json.dump(data, fh, indent=2)
          print("----- input.json -----")
          print(json.dumps(data, indent=2))
          PY
        env:
          FILES:  ${{ steps.changed.outputs.changed }}
          LABELS: ${{ steps.labels.outputs.labels }}

      - name: "Guard: ensure .rego policy exists"
        shell: bash
        run: |
          set -Eeuo pipefail
          COUNT=$(find "${{ github.workspace }}/conftest-policy" -type f -name '*.rego' | wc -l || true)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No .rego files found under conftest-policy/. Check the path or filename."
            exit 1
          fi
          echo "Found $COUNT rego file(s)."

      - name: Show workspace snippets
        shell: bash
        run: |
          echo "pwd: $(pwd)"
          echo "--- rego files (<= depth 3) ---"
          find . -maxdepth 3 -type f -name "*.rego" -print || true
          echo "--- input.json ---"
          cat input.json || true

      - name: Print policy hash (which policy did we run?)
        shell: bash
        run: |
          set -e
          sha256sum "${{ github.workspace }}/conftest-policy/path_guard.rego" || true
          nl -ba "${{ github.workspace }}/conftest-policy/path_guard.rego" | sed -n '1,40p'

      - name: Install Conftest
        shell: bash
        run: |
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.62.0/conftest_0.62.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
          conftest --version

      - name: Conftest verify
        shell: bash
        run: conftest verify --policy "${{ github.workspace }}/conftest-policy"

      - name: Run path guard
        shell: bash
        run: conftest test --namespace pr.pathguard --policy "${{ github.workspace }}/conftest-policy" "${{ github.workspace }}/input.json"

      - name: Upload input.json (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conftest-input
          path: input.json
          retention-days: 7
