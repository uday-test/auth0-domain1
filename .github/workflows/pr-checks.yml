name: Path Guard (Conftest)

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize, edited]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: pr-guard-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  path-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "Base: $BASE"
          echo "Head: $HEAD"

      - name: Compute changed files
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          CHANGED="$(git diff --name-only ${{ steps.revs.outputs.base }}...${{ steps.revs.outputs.head }} || true)"
          echo "changed<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "Changed files:"
          echo "$CHANGED"

      - name: Resolve actor team slugs
        id: teams
        shell: bash
        env:
          ORG_TOKEN: ${{ secrets.ORG_TOKEN }}   # Needs read:org scope
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          ORG="${{ github.repository_owner }}"
          USER="${{ github.actor }}"
          HDR="Authorization: Bearer $ORG_TOKEN"
          ACC="Accept: application/vnd.github+json"

          echo "::group::Resolve actor team slugs"
          if [ -z "${ORG_TOKEN:-}" ]; then
            echo "ORG_TOKEN not set. Skipping team lookup."
            TEAMS_JSON="[]"
          else
            mapfile -t ALL_SLUGS < <(curl -sS -H "$HDR" -H "$ACC" "$API/orgs/$ORG/teams?per_page=100" | jq -r '.[].slug')
            MEMBERSHIPS=()
            for slug in "${ALL_SLUGS[@]}"; do
              [ -z "$slug" ] && continue
              code="$(curl -s -o /dev/null -w '%{http_code}' -H "$HDR" -H "$ACC" "$API/orgs/$ORG/teams/$slug/memberships/$USER")"
              if [ "$code" = "200" ]; then
                MEMBERSHIPS+=("$slug")
              fi
            done
            TEAMS_JSON="$(printf '%s\n' "${MEMBERSHIPS[@]:-}" | jq -R . | jq -s -c .)"
          fi

          echo "Actor: $USER"
          echo "Actor team slugs:"
          echo "$TEAMS_JSON" | jq .
          echo "::endgroup::"

          echo "actor_teams=$TEAMS_JSON" >> "$GITHUB_OUTPUT"

      - name: Create Conftest input
        shell: bash
        run: |
          python3 - << 'PY'
          import json, os
          files  = [f.strip() for f in os.environ.get("FILES","").splitlines() if f.strip()]
          try:
              actor_teams = json.loads(os.environ.get("ACTOR_TEAMS","[]"))
              if not isinstance(actor_teams, list):
                  actor_teams = []
          except Exception:
              actor_teams = []
          data = {"files": files, "actor_teams": actor_teams, "debug": True}
          with open("input.json","w", encoding="utf-8") as fh:
              json.dump(data, fh, indent=2)
          print("----- input.json -----")
          print(json.dumps(data, indent=2))
          PY
        env:
          FILES:       ${{ steps.changed.outputs.changed }}
          ACTOR_TEAMS: ${{ steps.teams.outputs.actor_teams }}

      - name: "Guard: ensure .rego policy exists"
        shell: bash
        run: |
          set -Eeuo pipefail
          COUNT=$(find "${{ github.workspace }}/conftest-policy" -type f -name '*.rego' | wc -l || true)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No .rego files found under conftest-policy/. Check the path or filename."
            exit 1
          fi
          echo "Found $COUNT rego file(s)."

      - name: Show workspace snippets
        shell: bash
        run: |
          echo "pwd: $(pwd)"
          echo "--- rego files (<= depth 3) ---"
          find . -maxdepth 3 -type f -name "*.rego" -print || true
          echo "--- input.json ---"
          cat input.json || true

      - name: Print policy hash
        shell: bash
        run: |
          set -e
          sha256sum "${{ github.workspace }}/conftest-policy/path_guard.rego" || true
          nl -ba "${{ github.workspace }}/conftest-policy/path_guard.rego" | sed -n '1,60p'

      - name: Install Conftest
        shell: bash
        run: |
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.62.0/conftest_0.62.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
          which conftest
          conftest --version

      - name: Conftest verify
        shell: bash
        run: conftest verify --policy "${{ github.workspace }}/conftest-policy"

      - name: Run path guard
        shell: bash
        run: conftest test --namespace pr.pathguard --policy "${{ github.workspace }}/conftest-policy" "${{ github.workspace }}/input.json"

      - name: Upload input.json (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conftest-input
          path: input.json
          retention-days: 7

  auth0-baseline:
    name: Auth0 Baseline (Conftest)
    runs-on: ubuntu-latest
    needs: [path-guard]  # optional; remove if you want parallel runs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "Base: $BASE"
          echo "Head: $HEAD"

      - name: Compute changed files
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          CHANGED="$(git diff --name-only ${{ steps.revs.outputs.base }}...${{ steps.revs.outputs.head }} || true)"
          echo "changed<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "Changed files:"
          echo "$CHANGED"

      - name: Select Auth0 resource targets
        id: targets
        shell: bash
        run: |
          set -Eeuo pipefail

          # Write changed file list (strip CRs to avoid weird parsing on Windows-origin commits)
          printf '%s\n' "${{ steps.changed.outputs.changed }}" | tr -d '\r' | awk 'NF' > /tmp/changed.txt

          # Adjust the regex if your resources live elsewhere
          grep -E '^(apps/[^/]+/resources/).*\.(ya?ml|json)$' /tmp/changed.txt > /tmp/targets.txt || true

          COUNT="$(wc -l < /tmp/targets.txt | tr -d ' ')"
          {
            echo "count=${COUNT}"
          } >> "$GITHUB_OUTPUT"

          echo "Targets (${COUNT}):"
          cat /tmp/targets.txt || true

      - name: Guard: ensure auth0.policy exists
        shell: bash
        run: |
          set -Eeuo pipefail
          REGOROOT="${{ github.workspace }}/base/policies/auth0-policy"
          if [ ! -f "$REGOROOT/auth0.policy.rego" ]; then
            echo "::error::Missing $REGOROOT/auth0.policy.rego"
            exit 1
          fi
          echo "Found policy at $REGOROOT/auth0.policy.rego"
          echo "--- policy head ---"
          nl -ba "$REGOROOT/auth0.policy.rego" | sed -n '1,80p'


      - name: Install Conftest
        shell: bash
        run: |
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.62.0/conftest_0.62.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
          which conftest
          conftest --version

      - name: Conftest verify (auth0 baseline)
        shell: bash
        run: conftest verify --policy "${{ github.workspace }}/base/policies/auth0-policy"

      - name: Run Auth0 baseline on changed files
        if: steps.targets.outputs.count != '0'
        shell: bash
        run: |
          set -Eeuo pipefail
          xargs -r -a /tmp/targets.txt -n 32 \
            conftest test --namespace auth0.policy --policy "${{ github.workspace }}/base/policies/auth0-policy"

      - name: No Auth0 resources changed (skip)
        if: steps.targets.outputs.count == '0'
        run: echo "No apps/**/resources/*.yaml|yml|json changed; skipping Auth0 baseline."
