name: PR Checks (Conftest)

on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize, edited, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: pr-check-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  path-guard:
    name: Path Guard (Conftest)
    runs-on: ubuntu-latest
    env:
      ORG_TOKEN: ${{ secrets.ORG_TOKEN }}  # optional org-level PAT (read:org) for team lookup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine base & head
        id: revs
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.event.pull_request.base.sha || '' }}"
          HEAD="${{ github.event.pull_request.head.sha || github.sha }}"
          if [ -z "$BASE" ]; then
            git fetch origin main
            BASE="$(git rev-parse origin/main)"
          fi
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD" >> "$GITHUB_OUTPUT"
          echo "BASE=$BASE"
          echo "HEAD=$HEAD"

      - name: Get changed files
        id: changed
        shell: bash
        run: |
          set -Eeuo pipefail
          git diff --name-only "${{ steps.revs.outputs.base }}..${{ steps.revs.outputs.head }}" > /tmp/changed.txt || true
          echo "Changed files:"
          cat /tmp/changed.txt || true
          jq -Rsn '[inputs | split("\n")[] | select(length>0)]' < /tmp/changed.txt > /tmp/files.json
          echo "files.json:"
          cat /tmp/files.json

      - name: Resolve actor teams (optional)
        id: teams
        shell: bash
        run: |
          set -Eeuo pipefail
          : > /tmp/actor_teams.json
          if [ -n "${ORG_TOKEN:-}" ]; then
            API="https://api.github.com"
            ORG="${{ github.repository_owner }}"
            HDR="Authorization: Bearer $ORG_TOKEN"
            ACC="Accept: application/vnd.github+json"
            # list teams of token user, filter to current org, get slugs
            curl -fsSL -H "$HDR" -H "$ACC" "$API/user/teams?per_page=100" \
              | jq --arg ORG "$ORG" '[.[] | select(.organization.login==$ORG) | .slug | ascii_downcase]' \
              > /tmp/actor_teams.json || echo "[]">/tmp/actor_teams.json
          else
            echo "[]">/tmp/actor_teams.json
            echo "No ORG_TOKEN; proceeding with empty team set."
          fi
          echo "actor_teams:"
          cat /tmp/actor_teams.json

      - name: Build input.json for Path Guard
        id: input
        shell: bash
        run: |
          set -Eeuo pipefail
          jq -n \
            --slurpfile files /tmp/files.json \
            --slurpfile teams /tmp/actor_teams.json \
            --argjson debug false \
            '{debug:$debug, files:$files[0], actor_teams:$teams[0]}' > input.json
          echo "input.json:"
          cat input.json

      - name: Install Conftest
        shell: bash
        run: |
          set -Eeuo pipefail
          curl -sSL https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz -o /tmp/conftest.tgz
          sudo tar -C /usr/local/bin -xzf /tmp/conftest.tgz conftest
          conftest --version

      - name: Run Path Guard policy
        shell: bash
        run: |
          set -Eeuo pipefail
          conftest test \
            --namespace pr.pathguard \
            --policy "./conftest-policy" \
            "./input.json"

      - name: Upload inputs (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conftest-input
          path: input.json

  auth0-policies:
    name: Auth0 Policies (Conftest verify)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Conftest
        shell: bash
        run: |
          set -Eeuo pipefail
          curl -sSL https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz -o /tmp/conftest.tgz
          sudo tar -C /usr/local/bin -xzf /tmp/conftest.tgz conftest
          conftest --version

      - name: Verify Rego unit tests (if present)
        shell: bash
        run: |
          set -Eeuo pipefail
          POLICY_DIR="base/policies/auth0-policy"
          if [ -d "$POLICY_DIR" ]; then
            # conftest verify runs Rego unit tests (same as `opa test`) found under POLICY_DIR
            if compgen -G "${POLICY_DIR}/*_test.rego" > /dev/null; then
              conftest verify "$POLICY_DIR"
            else
              echo "No *_test.rego found in ${POLICY_DIR}; skipping conftest verify."
            fi
          else
            echo "WARNING: ${POLICY_DIR} not found; skipping."
          fi

      - name: Optional policy smoke test with empty input
        shell: bash
        run: |
          set -Eeuo pipefail
          POLICY_DIR="base/policies/auth0-policy"
          if [ -d "$POLICY_DIR" ]; then
            echo '{}' > /tmp/empty.json
            # If your Auth0 policy package exposes rules expecting input, you can point tests at /tmp/empty.json
            # Adjust namespace if you have a package name (e.g., package auth0.policy)
            conftest test --policy "$POLICY_DIR" /tmp/empty.json || true
          fi
