name: Terraform Check

on:
  pull_request:
    branches:
      - main
    paths:
      - 'base/config.yml'
      - 'base/baseline-security.yml'
      - 'base/terraform/**'
      - 'apps/**'
      - 'tenants/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      
      - name: Debug - Check secrets availability
        run: |
          echo "Checking if secrets are available..."
          if [ -z "${{ secrets.DEV_AUTH0_DOMAIN }}" ]; then
            echo "ERROR: DEV_AUTH0_DOMAIN secret is not set or empty"
          else
            echo "✓ DEV_AUTH0_DOMAIN is set (length: ${#SECRET_DOMAIN})"
          fi
          
          if [ -z "${{ secrets.DEV_AUTH0_CLIENT_ID }}" ]; then
            echo "ERROR: DEV_AUTH0_CLIENT_ID secret is not set or empty"
          else
            echo "✓ DEV_AUTH0_CLIENT_ID is set"
          fi
          
          if [ -z "${{ secrets.DEV_AUTH0_CLIENT_SECRET }}" ]; then
            echo "ERROR: DEV_AUTH0_CLIENT_SECRET secret is not set or empty"
          else
            echo "✓ DEV_AUTH0_CLIENT_SECRET is set"
          fi
        env:
          SECRET_DOMAIN: ${{ secrets.DEV_AUTH0_DOMAIN }}
      
      - name: Terraform Format Check
        id: fmt
        working-directory: ./base/terraform
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ secrets.DEV_AUTH0_DOMAIN }}
          TF_VAR_auth0_client_id: ${{ secrets.DEV_AUTH0_CLIENT_ID }}
          TF_VAR_auth0_client_secret: ${{ secrets.DEV_AUTH0_CLIENT_SECRET }}
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: ./base/terraform
        run: terraform validate -no-color
      
      - name: Debug - Verify environment variables before plan
        run: |
          echo "Checking TF_VAR variables are set..."
          if [ -n "$TF_VAR_auth0_domain" ]; then
            echo "✓ TF_VAR_auth0_domain is set"
          else
            echo "ERROR: TF_VAR_auth0_domain is NOT set"
          fi
          
          if [ -n "$TF_VAR_auth0_client_id" ]; then
            echo "✓ TF_VAR_auth0_client_id is set"
          else
            echo "ERROR: TF_VAR_auth0_client_id is NOT set"
          fi
          
          if [ -n "$TF_VAR_auth0_client_secret" ]; then
            echo "✓ TF_VAR_auth0_client_secret is set"
          else
            echo "ERROR: TF_VAR_auth0_client_secret is NOT set"
          fi
        env:
          TF_VAR_auth0_domain: ${{ secrets.DEV_AUTH0_DOMAIN }}
          TF_VAR_auth0_client_id: ${{ secrets.DEV_AUTH0_CLIENT_ID }}
          TF_VAR_auth0_client_secret: ${{ secrets.DEV_AUTH0_CLIENT_SECRET }}
      
      - name: Terraform Plan
        id: plan
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ secrets.DEV_AUTH0_DOMAIN }}
          TF_VAR_auth0_client_id: ${{ secrets.DEV_AUTH0_CLIENT_ID }}
          TF_VAR_auth0_client_secret: ${{ secrets.DEV_AUTH0_CLIENT_SECRET }}
        run: |
          terraform plan -no-color -out=tfplan -detailed-exitcode || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 1 ]; then
            exit 1
          fi
          exit 0
        continue-on-error: true
      
      - name: Capture Plan Output
        id: show
        if: always() && steps.plan.outcome != 'skipped'
        working-directory: ./base/terraform
        run: |
          if [ -f tfplan ]; then
            terraform show -no-color tfplan > plan_output.txt 2>&1
          else
            echo "Plan file not generated - see errors above" > plan_output.txt
          fi
        continue-on-error: true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read plan output
            let planOutput = 'Plan output not available';
            try {
              planOutput = fs.readFileSync('./base/terraform/plan_output.txt', 'utf8');
              // Truncate if too long (GitHub has comment size limits)
              if (planOutput.length > 65000) {
                planOutput = planOutput.substring(0, 65000) + '\n\n... (truncated)';
              }
            } catch (error) {
              planOutput = `Error reading plan output: ${error.message}`;
            }
            
            // Build status summary
            const fmtStatus = '${{ steps.fmt.outcome }}' === 'success' ? '✅' : '❌';
            const initStatus = '${{ steps.init.outcome }}' === 'success' ? '✅' : '❌';
            const validateStatus = '${{ steps.validate.outcome }}' === 'success' ? '✅' : '❌';
            const planStatus = '${{ steps.plan.outcome }}' === 'success' ? '✅' : '❌';
            const planExitCode = '${{ steps.plan.outputs.exit_code }}';
            
            let planMessage = '';
            if (planExitCode === '0') {
              planMessage = '✅ No changes detected';
            } else if (planExitCode === '2') {
              planMessage = '📝 Changes detected';
            } else {
              planMessage = '❌ Plan failed';
            }
            
            const output = `#### Terraform Plan Results 📖
            
            | Step | Status |
            |------|--------|
            | Format | ${fmtStatus} |
            | Init | ${initStatus} |
            | Validate | ${validateStatus} |
            | Plan | ${planStatus} ${planMessage} |
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>
            
            *Environment: \`dev\` | Triggered by: @${{ github.actor }}*`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terraform Plan Results')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      
      - name: Fail workflow if plan failed
        if: steps.plan.outputs.exit_code == '1'
        run: |
          echo "Terraform plan failed with errors"
          exit 1