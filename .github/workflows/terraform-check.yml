name: Terraform Check

on:
  pull_request:
    branches:
      - main
    paths:
      - 'base/base-line/configs/**'

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

jobs:
  # First job: Wait for prerequisite checks to complete successfully
  wait-for-pr-checks:
    name: Wait for PR Checks to Pass
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Path Guard and Baseline Validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxAttempts = 60; // 10 minutes total
            const delayMs = 10000;  // Check every 10 seconds
            
            const requiredChecks = [
              'Path Guard (Conftest)',
              'Baseline Config Validation'
            ];
            
            console.log('Waiting for prerequisite checks to complete...');
            console.log(`Required checks: ${requiredChecks.join(', ')}`);
            
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`\nAttempt ${attempt}/${maxAttempts}`);
              
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha,
              });
              
              let allComplete = true;
              let anyFailed = false;
              
              for (const checkName of requiredChecks) {
                const check = checks.check_runs.find(c => c.name === checkName);
                
                if (!check) {
                  console.log(`  ‚è≥ ${checkName}: Not started yet`);
                  allComplete = false;
                } else if (check.status !== 'completed') {
                  console.log(`  ‚è≥ ${checkName}: ${check.status}`);
                  allComplete = false;
                } else if (check.conclusion === 'success' || check.conclusion === 'skipped') {
                  console.log(`  ‚úÖ ${checkName}: ${check.conclusion}`);
                } else {
                  console.log(`  ‚ùå ${checkName}: ${check.conclusion}`);
                  anyFailed = true;
                }
              }
              
              if (anyFailed) {
                core.setFailed('One or more prerequisite checks failed. Terraform check will not run.');
                return;
              }
              
              if (allComplete) {
                console.log('\n‚úÖ All prerequisite checks passed!');
                console.log('Proceeding with Terraform plan...');
                return;
              }
              
              if (attempt < maxAttempts) {
                console.log(`Waiting ${delayMs/1000} seconds before next check...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
              }
            }
            
            core.setFailed('Timeout: Prerequisite checks did not complete within 10 minutes');

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [wait-for-pr-checks]
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      
      - name: Debug - Check secrets availability
        run: |
          echo "Checking if secrets are available..."
          if [ -z "${{ secrets.DEV_AUTH0_DOMAIN }}" ]; then
            echo "ERROR: DEV_AUTH0_DOMAIN secret is not set or empty"
          else
            echo "‚úì DEV_AUTH0_DOMAIN is set"
          fi
          
          if [ -z "${{ secrets.DEV_AUTH0_CLIENT_ID }}" ]; then
            echo "ERROR: DEV_AUTH0_CLIENT_ID secret is not set or empty"
          else
            echo "‚úì DEV_AUTH0_CLIENT_ID is set"
          fi
          
          if [ -z "${{ secrets.DEV_AUTH0_CLIENT_SECRET }}" ]; then
            echo "ERROR: DEV_AUTH0_CLIENT_SECRET secret is not set or empty"
          else
            echo "‚úì DEV_AUTH0_CLIENT_SECRET is set"
          fi
      
      - name: Terraform Format Check
        id: fmt
        working-directory: ./base/terraform
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ secrets.DEV_AUTH0_DOMAIN }}
          TF_VAR_auth0_client_id: ${{ secrets.DEV_AUTH0_CLIENT_ID }}
          TF_VAR_auth0_client_secret: ${{ secrets.DEV_AUTH0_CLIENT_SECRET }}
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: ./base/terraform
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ secrets.DEV_AUTH0_DOMAIN }}
          TF_VAR_auth0_client_id: ${{ secrets.DEV_AUTH0_CLIENT_ID }}
          TF_VAR_auth0_client_secret: ${{ secrets.DEV_AUTH0_CLIENT_SECRET }}
        run: |
          terraform plan -no-color -out=tfplan -detailed-exitcode || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 1 ]; then
            exit 1
          fi
          exit 0
        continue-on-error: true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const initStatus = '${{ steps.init.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const validateStatus = '${{ steps.validate.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const planStatus = '${{ steps.plan.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const planExitCode = '${{ steps.plan.outputs.exit_code }}';
            
            let planMessage = '';
            if (planExitCode === '0') {
              planMessage = '‚úÖ No changes detected';
            } else if (planExitCode === '2') {
              planMessage = 'üìù Changes detected';
            } else {
              planMessage = '‚ùå Plan failed';
            }
            
            const output = `#### Terraform Plan Results üìñ
            
            **Prerequisites:** ‚úÖ Path Guard Passed | ‚úÖ Baseline Validation Passed
            
            | Step | Status |
            |------|--------|
            | Init | ${initStatus} |
            | Validate | ${validateStatus} |
            | Plan | ${planStatus} ${planMessage} |
            
            *Environment: \`dev\` | Triggered by: @${{ github.actor }}*`;
            
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terraform Plan Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      
      - name: Fail workflow if plan failed
        if: steps.plan.outputs.exit_code == '1'
        run: |
          echo "Terraform plan failed with errors"
          exit 1