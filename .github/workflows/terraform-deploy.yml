name: Terraform Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'base/config.yml'
      - 'base/baseline-security.yml'
      - 'base/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod

jobs:
  deploy:
    name: Deploy to Auth0
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Get secrets for environment
        id: secrets
        run: |
          case "${{ steps.env.outputs.environment }}" in
            dev)
              echo "domain=${{ secrets.DEV_AUTH0_DOMAIN }}" >> $GITHUB_OUTPUT
              echo "client_id=${{ secrets.DEV_AUTH0_CLIENT_ID }}" >> $GITHUB_OUTPUT
              echo "client_secret=${{ secrets.DEV_AUTH0_CLIENT_SECRET }}" >> $GITHUB_OUTPUT
              ;;
            qa)
              echo "domain=${{ secrets.QA_AUTH0_DOMAIN }}" >> $GITHUB_OUTPUT
              echo "client_id=${{ secrets.QA_AUTH0_CLIENT_ID }}" >> $GITHUB_OUTPUT
              echo "client_secret=${{ secrets.QA_AUTH0_CLIENT_SECRET }}" >> $GITHUB_OUTPUT
              ;;
            prod)
              echo "domain=${{ secrets.PROD_AUTH0_DOMAIN }}" >> $GITHUB_OUTPUT
              echo "client_id=${{ secrets.PROD_AUTH0_CLIENT_ID }}" >> $GITHUB_OUTPUT
              echo "client_secret=${{ secrets.PROD_AUTH0_CLIENT_SECRET }}" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Verify secrets are set
        run: |
          if [ -z "${{ steps.secrets.outputs.domain }}" ] || \
             [ -z "${{ steps.secrets.outputs.client_id }}" ] || \
             [ -z "${{ steps.secrets.outputs.client_secret }}" ]; then
            echo "Error: Required secrets not configured for ${{ steps.env.outputs.environment }} environment"
            exit 1
          fi
      
      - name: Terraform Init
        id: init
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ steps.secrets.outputs.domain }}
          TF_VAR_auth0_client_id: ${{ steps.secrets.outputs.client_id }}
          TF_VAR_auth0_client_secret: ${{ steps.secrets.outputs.client_secret }}
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ steps.secrets.outputs.domain }}
          TF_VAR_auth0_client_id: ${{ steps.secrets.outputs.client_id }}
          TF_VAR_auth0_client_secret: ${{ steps.secrets.outputs.client_secret }}
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
      
      - name: Terraform Apply
        id: apply
        working-directory: ./base/terraform
        env:
          TF_VAR_auth0_domain: ${{ steps.secrets.outputs.domain }}
          TF_VAR_auth0_client_id: ${{ steps.secrets.outputs.client_id }}
          TF_VAR_auth0_client_secret: ${{ steps.secrets.outputs.client_secret }}
        run: terraform apply -auto-approve tfplan
      
      - name: Extract Outputs
        id: outputs
        if: success()
        working-directory: ./base/terraform
        run: |
          CLIENT_ID=$(terraform output -raw client_id 2>/dev/null || echo "N/A")
          CLIENT_NAME=$(terraform output -raw client_name 2>/dev/null || echo "N/A")
          APP_TYPE=$(terraform output -raw app_type 2>/dev/null || echo "N/A")
          
          echo "client_id=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "client_name=$CLIENT_NAME" >> $GITHUB_OUTPUT
          echo "app_type=$APP_TYPE" >> $GITHUB_OUTPUT
      
      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ steps.env.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Client Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- Client ID: \`${{ steps.outputs.outputs.client_id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Client Name: \`${{ steps.outputs.outputs.client_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- App Type: \`${{ steps.outputs.outputs.app_type }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for error details." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload plan for review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.env.outputs.environment }}-${{ github.run_number }}
          path: ./base/terraform/plan_output.txt
          retention-days: 30